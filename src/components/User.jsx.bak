import React, { useEffect, useState } from "react";
import useUpdateEffect from "./hooks/useUpdateEffect";
import { useParams } from "react-router-dom";
import { useToast } from "./contexts/ToastContext";
import { useData } from "./contexts/DataContext";
import axios from "axios";
import Loading from "./Loading";
import Avatar from "./Avatar";

import { CgPhone } from "react-icons/cg";
import { BiCheck } from "react-icons/bi";
import { TbSocial } from "react-icons/tb";

const vaccinationStatuses = [
  {
    value: "full",
    name: "Fully vaccinated",
  },
  {
    value: "partial",
    name: "Partically vaccinated",
  },
  {
    value: "notVaccinated",
    name: "Not vaccinated",
  },
  {
    value: "eligible",
    name: "Vaccine eligible",
  },
  {
    value: "ineligible",
    name: "Vaccine ineligible",
  },
];

const User = () => {
  const { _id } = useParams();
  const { setToast } = useToast();
  const { data } = useData();

  const [isLocalDataReady, setIsLocalDataReady] = useState(false);
  const [userData, setUserData] = useState([]);
  const [isUserDataReady, setIsUserDataReady] = useState(false);
  const [basicInfo, setBasicInfo] = useState(null);
  const [section, setSection] = useState(null);
  const [personalInfo, setPersonalInfo] = useState(null);
  const [contactInfo, setContactInfo] = useState(null);
  const [bio, setBio] = useState(null);
  const [educationInfo, setEducationInfo] = useState(null);
  const [healthInfo, setHealthInfo] = useState(null);

  useEffect(() => {
    if (data) {
      setIsLocalDataReady(true);
    }
  }, [data]);

  useEffect(() => {
    axios
      .get("/api/v1/users/profile", { params: { _id } })
      .then((res) => {
        if (res.data.success) {
          let userData = res.data.userData;

          setIsUserDataReady(true);
          setUserData(userData);
          console.log(res.data.userData);

          let userBasicInfo = userData.find((obj) => obj.type === "basic");
          if (userBasicInfo.section) {
            setSection(userBasicInfo.section);
          } else if (userBasicInfo.adviseeSection) {
            setSection(userBasicInfo.adviseeSection);
          }
          setBasicInfo(userBasicInfo);
          setPersonalInfo(userData.find((obj) => obj.type === "personalInfo"));
          setContactInfo(userData.find((obj) => obj.type === "contact"));
          setBio(userData.find((obj) => obj.type === "bio"));
          setEducationInfo(userData.find((obj) => obj.type === "education"));
          setHealthInfo(userData.find((obj) => obj.type === "health"));
          document.title = `${userBasicInfo.firstName} ${userBasicInfo.lastName}`;
        }
      })
      .catch((err) => {
        setToast({ icon: "cross", message: "An error occured" });
        console.error(err);
        console.log("Failed to fetch user data");
      });
  }, []);

  const infoGroupContainerClassName = "flex flex-col space-y-[0.6rem]";

  return (
    <div className="bg-white rounded-lg text-indigo-700 p-5 sm:p-7 m-1 sm:m-4 lg:p-12 shadow flex flex-col space-y-8">
      {isLocalDataReady ? (
        isUserDataReady ? (
          <>
            <div className=" flex space-x-4 lg:space-x-6 items-center">
              <Avatar user={{ ...basicInfo, _id }} size={10} path="/user/" />
              <span className="flex flex-col space-y-1">
                <h1 className="text-transparent bg-clip-text bg-gradient-to-l from-purple-500 to-sky-600 my-1 text-2xl sm:text-3xl md:text-4xl lg:text-5xl leading-tighter sm:leading-tight">
                  {basicInfo.firstName} {basicInfo.lastName}
                </h1>
                {section ? (
                  <span className="rounded-full px-3 py-1 text-sm sm:text-base bg-indigo-400 w-max text-white font-semibold">
                    {
                      data.map.sections.find(
                        (sectionObj) => sectionObj.value === section
                      ).name
                    }
                  </span>
                ) : (
                  <></>
                )}
              </span>
            </div>
            {personalInfo ? (
              <div className={infoGroupContainerClassName}>
                <h3 className="underline underline-offset-3 decoration-4 decoration-blue-400">
                  Personal Info
                </h3>
                <div className="flex items-center justify-between">
                  <span className="mr-3">Gender:</span>
                  <span>
                    {personalInfo.sex === "m"
                      ? "Male"
                      : personalInfo.sex === "f"
                      ? "Female"
                      : "Prefer not to say"}
                  </span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="mr-3">Address:</span>
                  <span
                    className="max-w-[15rem] sm:max-w-[21rem] md:max-w-[17rem] lg:max-w-[35rem] xl:max-w-xl truncate"
                    title={personalInfo.address}
                  >
                    {personalInfo.address}
                  </span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="mr-3">Birthdate:</span>
                  <span>
                    {new Date(personalInfo.birthdate).toLocaleDateString(
                      "en-US",
                      { month: "short", day: "numeric", year: "numeric" }
                    )}
                  </span>
                </div>
              </div>
            ) : (
              <></>
            )}
            {bio ? (
              <div className={infoGroupContainerClassName}>
                <h3 className="underline underline-offset-3 decoration-4 decoration-blue-400">
                  Bio
                </h3>
                <div className="whitespace-pre-line">{bio.bio}</div>
              </div>
            ) : (
              <></>
            )}
            {contactInfo ? (
              <div
                className={
                  infoGroupContainerClassName + "flex flex-col space-y-3"
                }
              >
                <h3 className="underline underline-offset-3 decoration-4 decoration-blue-400">
                  Contact
                </h3>
                {contactInfo.phoneNumbers.length !== 0 ? (
                  <>
                    <h4 className="flex space-x-2 items-center">
                      <CgPhone />
                      <span>Phone numbers</span>
                    </h4>
                    <ul className="ml-2 flex flex-col space-y-1">
                      {contactInfo.phoneNumbers.map((number, i) => (
                        <li key={i} className="flex space-x-2 items-center">
                          <BiCheck />
                          <span>{number}</span>
                        </li>
                      ))}
                    </ul>
                  </>
                ) : (
                  <></>
                )}
                {contactInfo.socialMediaLinks.length !== 0 ? (
                  <>
                    <h4 className="flex space-x-2 items-center">
                      <TbSocial />
                      <span>Social Media Links</span>
                    </h4>
                    <ul className="ml-2 flex flex-col space-y-1">
                      {contactInfo.socialMediaLinks.map((link, i) => (
                        <li key={i} className="flex space-x-2 items-center">
                          <BiCheck />
                          <span>{link}</span>
                        </li>
                      ))}
                    </ul>
                  </>
                ) : (
                  <></>
                )}
              </div>
            ) : (
              <></>
            )}
            {educationInfo ? (
              <div className={infoGroupContainerClassName}>
                <h3 className="underline underline-offset-3 decoration-4 decoration-blue-400">
                  Education
                </h3>
                <div className="flex items-center justify-between mr-5">
                  <span>Elementary School:</span>
                  <span>{educationInfo.elementarySchool}</span>
                </div>
                <div className="flex items-center justify-between mr-5">
                  <span>Junior High School:</span>
                  <span>{educationInfo.juniorHighSchool}</span>
                </div>
                <div>
                  <h5 className="flex space-x-2 items-center mt-2 mb-3">
                    <span>Target Courses</span>
                  </h5>
                  <ul className="ml-2 flex flex-col space-y-1">
                    {educationInfo.targetCourses.map((course, i) => (
                      <li key={i} className="flex space-x-2 items-center">
                        <BiCheck />
                        <span>{course}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
            ) : (
              <></>
            )}

            {healthInfo ? (
              <div className={infoGroupContainerClassName}>
                <h3 className="underline underline-offset-3 decoration-4 decoration-blue-400">
                  Health
                </h3>
                <div className="flex items-center justify-between mr-5">
                  <span>Vaccination Status:</span>
                  <span>
                    {
                      healthInfo.vaccinationStatus ? vaccinationStatuses.find(
                        (obj) => obj.value === healthInfo.vaccinationStatus
                      ).name : '';
                    }
                  </span>
                </div>
                <div className="flex items-center justify-between mr-5">
                  <span>Blood Type:</span>
                  <span>{healthInfo.bloodType.toUpperCase()}</span>
                </div>
                <div className="flex items-center justify-between mr-5">
                  <span>Height:</span>
                  <span>{healthInfo.height} cm</span>
                </div>
                <div className="flex items-center justify-between mr-5">
                  <span>Weight:</span>
                  <span>{healthInfo.weight} kg</span>
                </div>
              </div>
            ) : (
              <></>
            )}
          </>
        ) : (
          <Loading />
        )
      ) : (
        <Loading />
      )}
    </div>
  );
};

export default User;
